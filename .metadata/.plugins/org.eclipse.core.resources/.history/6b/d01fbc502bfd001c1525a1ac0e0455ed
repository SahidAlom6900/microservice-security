package com.technoelevate.auth.util;

import java.util.Base64;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class JwtUtils {

    private String secrete = "RostenRoss35689682_Nestor_Matias_Costantini_16/04/1991_programador-universitario_profesor-de-quimica";
    private String expireTimeInMilliSec="30000";

    public String generateToken(String username, Collection<GrantedAuthority> authorities) {
        Date now =new Date();
        Map<String, Object> claim = new HashMap<>();
        claim.put("alg", "HS256");
        claim.put("typ", "JWT");
        
        return Jwts.builder()
                .signWith(SignatureAlgorithm.HS256,Base64.getEncoder().encode(secrete.getBytes()))
                .setClaims(claim)
                .setSubject(username)
                .setExpiration(new Date(System.currentTimeMillis() + 864000000))
                .claim("roles", authorities.stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()))
                .compact();
    }
    
    public Claims getClaimsFromToken(String token) {
        return Jwts.parser().setSigningKey(Base64.getEncoder().encodeToString(secrete.getBytes()))
                .parseClaimsJws(token.replace("Bearer ", ""))
                .getBody();
    }
    
    public String getUsernameFromToken(String token) {
        return getClaimsFromToken(token).getSubject();
    }
    
    public Date getExpirationDate(String token) {
        return getClaimsFromToken(token).getExpiration();
    }
    
    public Boolean isTokenExpired(String token) {
        Date expirationDate = getExpirationDate(token);
        log.info("isTokenExpired: "+expirationDate.before(new Date()));
        return expirationDate.before(new Date());
    }
    
    public Boolean isTokenValidated(String token) {
        return !isTokenExpired(token);
    }
}
//public class JwtUtils {
//	private static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);
//
//	@Value("${auth.app.jwt-secret: qwerty}")
//	private String jwtSecret;
//
//	@Value("${auth.app.jwt-expiration-ms: 86400000}") // 24*60*60*1000
//	private int jwtExpirationMs;
//
//	@Value("${auth.app.jwt-refresh-ms: 1296000000}") // 15*24*60*60*1000
//	private int jwtRefreshMs;
//
//	@Value("${auth.app.jwt-not-before-ms: 3000}") // 3*1000
//	private int jwtNotBefore;
//
//	public String[] generateJwtToken(String username, Collection<GrantedAuthority> authorities) {
//
//		final Key hmacKey = new SecretKeySpec(Base64.getDecoder().decode(jwtSecret),
//				SignatureAlgorithm.HS512.getJcaName());
//		String accessToken = Jwts.builder()
//				.claim("roles", authorities.stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()))
//				.setIssuer("Technoelevate Group").setSubject(username).setAudience("you")
//				.setExpiration(new Date(Date.from(Instant.now()).getTime() + jwtExpirationMs))
////				.setNotBefore(new Date(Date.from(Instant.now()).getTime() + jwtNotBefore))
//				.setIssuedAt(Date.from(Instant.now())).setHeaderParam("typ", "JWT").setId(UUID.randomUUID().toString())
//				.signWith(SignatureAlgorithm.HS512, hmacKey).compact();
//
//		String refreshToken = Jwts.builder().setSubject(username).setAudience("you")
//				.setExpiration(new Date(Date.from(Instant.now()).getTime() + jwtExpirationMs))
//				.setNotBefore(new Date(Date.from(Instant.now()).getTime() + jwtNotBefore))
//				.setIssuedAt(Date.from(Instant.now())).setHeaderParam("typ", "JWT").setId(UUID.randomUUID().toString())
//				.signWith(SignatureAlgorithm.HS512, hmacKey).compact();
//
//		return new String[] { accessToken, refreshToken };
//	}
//
//	public String getUserNameFromJwtToken(String token) {
//		return Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token).getBody().getSubject();
//	}
//
//	public boolean validateJwtToken(String authToken) throws SignatureException {
//		try {
//			Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(authToken);
//			return true;
//		} catch (MalformedJwtException e) {
//			logger.error("Invalid JWT token: {}", e.getMessage());
//		} catch (ExpiredJwtException e) {
//			logger.error("JWT token is expired: {}", e.getMessage());
//		} catch (UnsupportedJwtException e) {
//			logger.error("JWT token is unsupported: {}", e.getMessage());
//		} catch (IllegalArgumentException e) {
//			logger.error("JWT claims string is empty: {}", e.getMessage());
//		}
//		return false;
//	}
//}