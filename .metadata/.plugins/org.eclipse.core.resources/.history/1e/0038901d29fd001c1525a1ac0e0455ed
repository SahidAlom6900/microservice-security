package com.technoelevate.user_service.util;

import java.nio.charset.Charset;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.UnsupportedJwtException;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class JwtUtils {

	@Value("${auth.app.jwt-secret: qwerty}")
	private String jwtSecret;

//	 Key hmacKey = new SecretKeySpec(Base64.getDecoder().decode(jwtSecret),
//			SignatureAlgorithm.HS512.getJcaName());

	public Claims getClaims(String token) {
//		System.out.println(hmacKey);
return Jwts.parser().setSigningKey(jwtSecret.getBytes(Charset.forName("UTF-8"))).parseClaimsJws(token.replace("{", "").replace("}","")).getBody();
    
//		return  Jwts.parser().setSigningKey(jwtSecret.getBytes()).parseClaimsJws(token).getBody();
	}
	
	public boolean validateJwtToken(String authToken) {
		try {
			System.out.println(authToken+"  authToken");
			Jwts.parser().setSigningKey(jwtSecret.getBytes(Charset.forName("UTF-8"))).parseClaimsJws(token.replace("{", "").replace("}",""))
//			Jwts.parser().setSigningKey(jwtSecret.getBytes()).parseClaimsJws(authToken);
			return true;
		} catch (MalformedJwtException e) {
			log.error("Invalid JWT token: {}", e.getMessage());
		} catch (ExpiredJwtException e) {
			log.error("JWT token is expired: {}", e.getMessage());
		} catch (UnsupportedJwtException e) {
			log.error("JWT token is unsupported: {}", e.getMessage());
		} catch (IllegalArgumentException e) {
			log.error("JWT claims string is empty: {}", e.getMessage());
		}
		return false;
	}
}