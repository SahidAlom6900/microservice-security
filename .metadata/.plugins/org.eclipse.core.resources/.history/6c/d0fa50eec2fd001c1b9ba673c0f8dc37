package com.technoelevate.inventory.service;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.technoelevate.inventory.dto.ProductDto;
import com.technoelevate.inventory.entity.Product;
import com.technoelevate.inventory.repository.ProductRepository;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class OrderServiceImpl implements OrderService {

	@Autowired
	private ProductRepository productRepository;

	@Override
	public List<Product> addOrUpdateProduct(List<ProductDto> productDtos) {
		log.info("===Inside Order Servive===");
		List<Product> products = productDtos.isEmpty() ? Collections.emptyList()
				: productDtos.stream().map(productdto -> {
					Product product01 = Product.builder().build();
					Product product = productRepository.findById(productdto.getProductId()).orElse(product01);
					product.setProductCount(product.getProductCount() + productdto.getProductCount());
					BeanUtils.copyProperties(productdto, product);
					return product;
				}).collect(Collectors.toList());
		if (products.isEmpty())
			return products;
		log.info("===Save Order===");
		System.out.println(products+" products");
		return productRepository.saveAll(products);
	}

	@Override
	public Product getProduct(Long id) {
		log.info("===Fatch Order With Id :" + id);
		return productRepository.findById(id).orElseThrow(IllegalStateException::new);
	}

	@Override
	public List<Product> getAllProduct() {
		log.info("===Fatch All Product!!!===");
		return productRepository.findAll();
	}

	@Override
	public Product deleteProduct(Long productId) {
		log.info("===Fatch Order With Id :" + productId);
		Product product = productRepository.findById(productId).orElseThrow(IllegalStateException::new);
		productRepository.delete(product);
		return product;
	}

}
