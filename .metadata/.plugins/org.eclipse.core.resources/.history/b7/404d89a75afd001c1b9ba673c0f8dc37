package com.technoelevate.user_service.filter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.technoelevate.user_service.exception.CustomAccessDeniedException;
import com.technoelevate.user_service.util.JwtUtils;

import io.jsonwebtoken.Claims;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@NoArgsConstructor
public class CustomAuthorizationFilter extends OncePerRequestFilter {
	private CustomAccessDeniedException accessDenied;

	private JwtUtils jwtUtils;

	private String token;

	public CustomAuthorizationFilter(CustomAccessDeniedException accessDenied, JwtUtils jwtUtils) {
		this.accessDenied = accessDenied;
		this.jwtUtils = jwtUtils;
	}

	@SuppressWarnings("unchecked")
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		if (request.getServletPath().equals("/api/v1/auth")
				|| request.getServletPath().equals("/api/v1/token/refresh/doctor")
				|| request.getServletPath().equals("/api/v1/token/refresh/patient")) {
			filterChain.doFilter(request, response);
		} else {
			String header = request.getHeader("Authorization");
			if (header != null && header.startsWith("Bearer ")) {
				try {
					String token = header.substring(7);
					jwtUtils.validateJwtToken(token);
					Claims claims = jwtUtils.getClaimsFromToken(token);
					String username = claims.getSubject();
					List<String> roles = (List<String>) claims.get("roles");
					Collection<SimpleGrantedAuthority> authorities = new ArrayList<>();
					roles.forEach(role -> authorities.add(new SimpleGrantedAuthority(role)));
					UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(
							username, null, authorities);
					SecurityContextHolder.getContext().setAuthentication(authenticationToken);
					this.token = token;
					filterChain.doFilter(request, response);
				} catch (Exception exception) {
					try {
						accessDenied.handle(request, response, new AccessDeniedException(exception.getMessage()));
					} catch (Exception exception2) {
						log.error(exception2.getMessage());
					}
				}
			} else
				filterChain.doFilter(request, response);
		}
	}

	public String getToken() {
		return this.token;
	}

}
