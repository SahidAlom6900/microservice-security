package com.technoelevate.kafka.producer.service;

import static org.assertj.core.api.Assertions.entry;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.AdminClientConfig;
import org.apache.kafka.clients.admin.ListTopicsOptions;
import org.apache.kafka.clients.admin.NewTopic;
import org.apache.kafka.clients.admin.TopicDescription;
import org.apache.kafka.clients.admin.TopicListing;
import org.apache.kafka.common.Node;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.config.TopicBuilder;
import org.springframework.stereotype.Service;

import com.technoelevate.kafka.producer.dto.TopicDescDto;
import com.technoelevate.kafka.producer.dto.TopicDetailsDto;
import com.technoelevate.kafka.producer.entity.Topic;

@Service
public class TopicCreationServiceImpl implements TopicCreationService {

	@Value("${spring.kafka.producer.bootstrap-servers: localhost:9092,localhost:9093,localhost:9094}")
	private String bootstrapServers;

	@Override
	public String crateTopic(Topic topic) {
		try (AdminClient adminClient = getAdminClient();) {

			NewTopic build = TopicBuilder.name(topic.getTopicName()).partitions(topic.getPartitions())
					.replicas(topic.getReplicationFactor()).build();
			List<NewTopic> topics = List.of(build);
			adminClient.createTopics(topics);
			ListTopicsOptions listTopicsOptions = new ListTopicsOptions();
			listTopicsOptions.listInternal(true);
			System.out.println(adminClient.listTopics(listTopicsOptions).names().get());
		} catch (InterruptedException | ExecutionException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public Collection<TopicListing> getAllTopicWithDesc() {
		TopicDetailsDto topic = TopicDetailsDto.builder().build();
		try (AdminClient adminClient = getAdminClient();) {
			ListTopicsOptions listTopicsOptions = new ListTopicsOptions();
			listTopicsOptions.listInternal(true);

			Set<Entry<String, TopicDescription>> describeTopics = adminClient
					.describeTopics(adminClient.listTopics(listTopicsOptions).names().get()).allTopicNames().get()
					.entrySet();

			for (Map.Entry<String, TopicDescription> topicDescription : describeTopics) {
				TopicDescription description = topicDescription.getValue();
				topic.setTopicName(description.name());
				topic.setPartitionCount(description.partitions().size());
//				 
				description.partitions().forEach(partition -> {
					
					int partitionId = partition.partition();
					String leader = partition.leader().idString();
					List<Integer> isrs = partition.isr().stream().map(isr -> isr.id()).collect(Collectors.toList());
					List<Integer> collect = partition.replicas().stream().map(replica -> replica.id())
							.collect(Collectors.toList());
					TopicDescDto.builder().isr(isrs).build();
				});
			}
//			 describeTopics.allTopicNames().

			System.out.println(describeTopics.allTopicNames());
			return null;
		} catch (InterruptedException | ExecutionException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public TopicDto getTopicWithDesc(String topicName) {
		try (AdminClient adminClient = getAdminClient();) {

			ListTopicsOptions listTopicsOptions = new ListTopicsOptions();
			listTopicsOptions.listInternal(true);
			System.out.println(adminClient.listTopics(listTopicsOptions).names().get());
		} catch (InterruptedException | ExecutionException e) {
			e.printStackTrace();
		}
		return null;
	}

	private AdminClient getAdminClient() {
		Properties properties = new Properties();
		properties.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
		return AdminClient.create(properties);
	}

}
